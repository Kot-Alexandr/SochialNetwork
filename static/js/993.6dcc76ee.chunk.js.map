{"version":3,"file":"static/js/993.6dcc76ee.chunk.js","mappings":"wPACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0B,mBCYhL,EARmB,SAACA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,iBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,WAA2C,gBAAKC,IAAI,6EAA2E,SAAC,KAAD,CAASC,GAAIL,EAAb,SAAoBD,EAAMO,WCOjK,EANgB,SAACP,GACb,OACI,gBAAKG,UAAWC,EAAAA,QAAhB,SAA4BJ,EAAMQ,WC+B1C,EA3BgB,SAACR,GAEb,IAAMS,EAAkBT,EAAMU,YAAYC,KACtC,SAACC,EAAGC,GAAJ,OAAc,SAAC,EAAD,CAAYN,KAAMK,EAAGL,KAAML,GAAIU,EAAGV,IAASW,MAEvDC,EAAmBd,EAAMe,aAAaJ,KACxC,SAACC,EAAGC,GAAJ,OAAc,SAAC,EAAD,CAASL,QAASI,EAAGJ,SAAcK,MAQrD,OACI,iBAAKV,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACKK,KAEL,iBAAKN,UAAWC,EAAAA,SAAhB,WACI,+BAAOU,MACP,SAACE,EAAD,CAAiBC,SAZP,SAACC,GACnBlB,EAAMmB,WAAYD,EAAOE,0BAuB3BC,GAAeC,EAAAA,EAAAA,GAAiB,KAoBhCN,GAAkBO,EAAAA,EAAAA,GAA0B,CAAEC,KAAM,UAAlCD,EAlBwC,SAACvB,GAI7D,OACI,kBAAMiB,SAAUjB,EAAMyB,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EAAUrB,KAAM,iBAAkBsB,YAAa,oCAC7DC,SAAU,CAACC,EAAAA,EAAUV,QAG7B,0BACI,qDCvChB,GAAeW,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAjBkB,SAACC,GACnB,MAAO,CACHxB,YAAawB,EAAMC,YAAYzB,YAC/BK,aAAcmB,EAAMC,YAAYpB,iBAIf,SAACqB,GACtB,MAAO,CACHjB,WAAY,SAACC,GACTgB,GAASC,EAAAA,EAAAA,GAAkBjB,SAQnCkB,EAAAA,EAFJ,CAGEC,I,gICjBEC,EAA0B,SAACN,GAC3B,MAAO,CACHO,OAAQP,EAAMQ,KAAKD,SAIpB,SAASH,EAAoDK,GAgBhE,OAFqCV,EAAAA,EAAAA,IAAQO,EAARP,EAZX,SAACjC,GAEvB,IAAMyC,EAAyBzC,EAAzByC,OAAWG,GAAjB,OAA+B5C,EAA/B,GAEA,OAAKyC,GAEE,SAACE,GAAD,UAAeC,KAFF,SAAC,KAAD,CAAUtC,GAAI","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DiologsItems/DialogsItems.tsx","components/Dialogs/Messages/Messages.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__qsPqu\",\"dialogsItems\":\"Dialogs_dialogsItems__QeE5s\",\"active\":\"Dialogs_active__RIcTI\",\"messages\":\"Dialogs_messages__n+SUv\",\"message\":\"Dialogs_message__TAaeC\"};","import { OmitProps } from 'antd/lib/transfer/ListBody';\r\nimport React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './../Dialogs.module.css'\r\n\r\nconst DialogItem = (props: any) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}><img src=\"http://disneydarkside.weebly.com/uploads/2/6/7/7/26777662/614874915.jpg\"/><NavLink to={path}>{props.name}</NavLink></div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem","import { OmitProps } from 'antd/lib/transfer/ListBody';\r\nimport React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport DialogItem from '../DiologsItems/DialogsItems';\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\n\r\n\r\nconst Message = (props: any) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message ","import React from \"react\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\r\nimport { Textarea } from '../Common/FormControl/FormsControl';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DiologsItems/DialogsItems';\r\nimport Message from './Messages/Messages';\r\n\r\n\r\nexport type DialogsPropsType = {\r\n    addMessage: (newMessageBody: string) => void\r\n    dialogsData: Array<{ id: number, name: string }>\r\n    messagesData: Array<{ id: number, message: string }>\r\n}\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    const DiaologElements = props.dialogsData.map(\r\n        (el,index) => <DialogItem name={el.name} id={el.id} key={index}  />\r\n    )\r\n    const messagesElements = props.messagesData.map(\r\n        (el,index) => <Message message={el.message} key={index}/>\r\n    )\r\n\r\n    const addNewMessage = (values: DialogFormType) => {\r\n        props.addMessage((values.newMessageBody))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {DiaologElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div> {messagesElements}</div>\r\n                <DialogReduxForm onSubmit={addNewMessage} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs\r\n\r\ntype DialogFormType = {\r\n    newMessageBody: string,\r\n}\r\n\r\nconst maxLenght100 = maxLengthCreator(100)\r\n\r\nconst DialogForm: React.FC<InjectedFormProps<DialogFormType>> = (props) => {\r\n\r\n\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={\"newMessageBody\"} placeholder={\"Your next message to your friend!\"}\r\n                    validate={[required, maxLenght100]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst DialogReduxForm = reduxForm<DialogFormType>({ form: 'dialog' })(DialogForm)","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { allMessageReducerType, sendMessageBodyAC } from '../../redux/messageReducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport Dialogs from './Dialogs';\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsData: state.messagePage.dialogsData,\r\n        messagesData: state.messagePage.messagesData,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: (action: allMessageReducerType) => void) => {\r\n    return {\r\n        addMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageBodyAC(newMessageBody))\r\n        },\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)","import React, { ComponentType } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../redux/redux-store\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\ntype MapStateToPropType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsRedirect = (state: AppStateType): MapStateToPropType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T extends JSX.IntrinsicAttributes>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropType) => {\r\n\r\n        let { isAuth, ...restProps } = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'} />\r\n\r\n        return <Component {...restProps as T} />\r\n\r\n    }\r\n\r\n\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n\r\n}"],"names":["props","path","id","className","s","src","to","name","message","DiaologElements","dialogsData","map","el","index","messagesElements","messagesData","DialogReduxForm","onSubmit","values","addMessage","newMessageBody","maxLenght100","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","placeholder","validate","required","compose","connect","state","messagePage","dispatch","sendMessageBodyAC","withAuthRedirect","Dialogs","mapStateToPropsRedirect","isAuth","auth","Component","restProps"],"sourceRoot":""}